package com.crossmesh.mesher_solidity.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class LockManager extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_LOCKDESERIALIZER = "lockDeserializer";

    public static final String FUNC_GETLOCK = "getLock";

    public static final String FUNC_PUTLOCK = "putLock";

    public static final String FUNC_GETWRITEKEYSET = "getWriteKeySet";

    public static final String FUNC_GETWRITEKEYSETLENGTH = "getWriteKeySetLength";

    public static final String FUNC_GETWSET = "getWSet";

    public static final String FUNC_GETWSETLENGTH = "getWSetLength";

    public static final String FUNC_PUTWSET = "putWSet";

    public static final String FUNC_GETSTATEMAYBELOCKED = "getStateMaybeLocked";

    public static final String FUNC_PUTSTATEMAYBELOCKED = "putStateMaybeLocked";

    public static final String FUNC_PUTLOCKEDSTATEWITHPRIMARYLOCK = "putLockedStateWithPrimaryLock";

    public static final String FUNC_PUTLOCKEDSTATEWITHNETWORKLOCK = "putLockedStateWithNetworkLock";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected LockManager(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected LockManager(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected LockManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected LockManager(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> lockDeserializer(byte[] data) {
        final Function function = new Function(
                FUNC_LOCKDESERIALIZER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Lock> getLock(byte[] hash) {
        final Function function = new Function(FUNC_GETLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Lock>() {}));
        return executeRemoteCallSingleValueReturn(function, Lock.class);
    }

    public RemoteFunctionCall<TransactionReceipt> putLock(byte[] hash, Lock lock) {
        final Function function = new Function(
                FUNC_PUTLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hash), 
                lock), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> getWriteKeySet(byte[] xidKey, BigInteger i) {
        final Function function = new Function(FUNC_GETWRITEKEYSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(xidKey), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getWriteKeySetLength(byte[] hash) {
        final Function function = new Function(FUNC_GETWRITEKEYSETLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getWSet(byte[] xidKey, BigInteger i) {
        final Function function = new Function(FUNC_GETWSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(xidKey), 
                new org.web3j.abi.datatypes.generated.Uint256(i)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> getWSetLength(byte[] hash) {
        final Function function = new Function(FUNC_GETWSETLENGTH, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hash)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> putWSet(byte[] hash, String value) {
        final Function function = new Function(
                FUNC_PUTWSET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(hash), 
                new org.web3j.abi.datatypes.Utf8String(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Lock> getStateMaybeLocked(String key) {
        final Function function = new Function(FUNC_GETSTATEMAYBELOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Lock>() {}));
        return executeRemoteCallSingleValueReturn(function, Lock.class);
    }

    public RemoteFunctionCall<TransactionReceipt> putStateMaybeLocked(String key, byte[] value) {
        final Function function = new Function(
                FUNC_PUTSTATEMAYBELOCKED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> putLockedStateWithPrimaryLock(String key, byte[] value) {
        final Function function = new Function(
                FUNC_PUTLOCKEDSTATEWITHPRIMARYLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> putLockedStateWithNetworkLock(String key, byte[] value, String primaryNetwork, BigInteger primaryChain, String primaryTxSender) {
        final Function function = new Function(
                FUNC_PUTLOCKEDSTATEWITHNETWORKLOCK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(key), 
                new org.web3j.abi.datatypes.DynamicBytes(value), 
                new org.web3j.abi.datatypes.Utf8String(primaryNetwork), 
                new org.web3j.abi.datatypes.generated.Uint256(primaryChain), 
                new org.web3j.abi.datatypes.Address(primaryTxSender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static LockManager load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new LockManager(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static LockManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new LockManager(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static LockManager load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new LockManager(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static LockManager load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new LockManager(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<LockManager> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _sidemesh) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sidemesh)));
        return deployRemoteCall(LockManager.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<LockManager> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _sidemesh) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sidemesh)));
        return deployRemoteCall(LockManager.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LockManager> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _sidemesh) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sidemesh)));
        return deployRemoteCall(LockManager.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<LockManager> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _sidemesh) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_sidemesh)));
        return deployRemoteCall(LockManager.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class URI extends DynamicStruct {
        public String network;

        public BigInteger chain;

        public URI(String network, BigInteger chain) {
            super(new org.web3j.abi.datatypes.Utf8String(network),new org.web3j.abi.datatypes.generated.Uint256(chain));
            this.network = network;
            this.chain = chain;
        }

        public URI(Utf8String network, Uint256 chain) {
            super(network,chain);
            this.network = network.getValue();
            this.chain = chain.getValue();
        }
    }

    public static class TransactionID extends DynamicStruct {
        public URI uri;

        public String sender;

        public TransactionID(URI uri, String sender) {
            super(uri,new org.web3j.abi.datatypes.Address(sender));
            this.uri = uri;
            this.sender = sender;
        }

        public TransactionID(URI uri, Address sender) {
            super(uri,sender);
            this.uri = uri;
            this.sender = sender.getValue();
        }
    }

    public static class Lock extends DynamicStruct {
        public TransactionID primaryPrepareTxId;

        public byte[] prevState;

        public byte[] updatingState;

        public Boolean isValid;

        public Lock(TransactionID primaryPrepareTxId, byte[] prevState, byte[] updatingState, Boolean isValid) {
            super(primaryPrepareTxId,new org.web3j.abi.datatypes.DynamicBytes(prevState),new org.web3j.abi.datatypes.DynamicBytes(updatingState),new org.web3j.abi.datatypes.Bool(isValid));
            this.primaryPrepareTxId = primaryPrepareTxId;
            this.prevState = prevState;
            this.updatingState = updatingState;
            this.isValid = isValid;
        }

        public Lock(TransactionID primaryPrepareTxId, DynamicBytes prevState, DynamicBytes updatingState, Bool isValid) {
            super(primaryPrepareTxId,prevState,updatingState,isValid);
            this.primaryPrepareTxId = primaryPrepareTxId;
            this.prevState = prevState.getValue();
            this.updatingState = updatingState.getValue();
            this.isValid = isValid.getValue();
        }
    }
}
